#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Wiring
\end_layout

\begin_layout Standard
Las aplicaciones web interactivas tienen muchos componentes que depende
 entre si dentro de una sola página web.
 Por ejemplo (y este es el ejemplo que se usará para este capítulo), puede
 ser que se tenga un carrito de compras en una aplicación.
 El carrito de compras contendrá artículos y cantidades.
 A medida de que se agregan/eliminan artículos del carrito, el carrito debe
 actualizarse, como también el sub-total, el impuesto, los gastos de envío
 y el total final.
 Ademas de, el total de artículos se puede mostrar en algunas páginas sin
 mostrar el contenido del carrito.
 Mantener el rastro de todas estas dependencias para todas las diferentes
 páginas es un trabajo muy duro.
 Cuando se tiene que actualizar el sitio, el equipo tiene que recordar donde
 se encuentran todos los artículos, como actualizarlos, y si se equivocan
 solo en uno, puede parecer que el sitio no esta funcionando correctamente.
\end_layout

\begin_layout Standard
El Wiring de Lift proveé una solución simple al manejo de dependencias complejas
 en una sola página o en varias pestañas.
 El Wiring de Lift permite declarar las relaciones de fórmula entre celas
 (como una hoja de cálculo) y luego los componentes de la interfaz de usuario
 (si, puede ser más de un componente) asociado a cada celda.
 Lift automáticamente actualizará los componentes de la interfaz de usuario
 basandose en el cambio de los predicados.
 Lift hará esto cuando la página se renderice inicialmente y en cada actualizaci
ón Ajax o Comet.
 Put another way, Wiring is like a spreadsheet and the page will automatically
 get updated when any of the predicate values change such that the change
 results in a change in the display value.
\end_layout

\begin_layout Section
Celdas(Cells)
\end_layout

\begin_layout Standard
Como una hoja de cálculo, Wiring en Lift se basa en Celdas(Cells).
 Existen tres tipos de Celdas: 
\family typewriter
ValueCell
\family default
, 
\family typewriter
DynamicCell
\family default
, y 
\family typewriter
FuncCell
\family default
.
\end_layout

\begin_layout Standard
Una celda del tipo 
\family typewriter
ValueCell
\family default
 contiene un valor que es ingresado por el usuario o que depende de alguna
 acción del usuario.
 Una celda 
\family typewriter
ValueCell
\family default
 puede representar los artículos del carrito de compras o la tasa de impuestos.
\end_layout

\begin_layout Standard
Una celda del tipo 
\family typewriter
DynamicCell
\family default
 contiene un valor que cambia cada vez que se accesde a la celda.
 Por ejemplo, un número aleatoreo o la hora actual.
\end_layout

\begin_layout Standard
Una celda del tipo 
\family typewriter
FuncCell
\family default
 tiene un valor en base a una formula que es aplicada a los valores de otras
 celdas.
\end_layout

\begin_layout Standard
Se ve a continuación algo de código que demuestra esto:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

val quantity = ValueCell(0)
\end_layout

\begin_layout Plain Layout

val price = ValueCell(1d)
\end_layout

\begin_layout Plain Layout

val total = price.lift(_ * quantity)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se definieron dos 
\family typewriter
ValueCell
\family default
s, uno parar 
\family typewriter
cantidad(quantity) 
\family default
y otra para el for 
\family typewriter
precio
\family default
(price).
 A continuación, se define el 
\family typewriter
total
\family default
 haciendo un 
\begin_inset Quotes eld
\end_inset

lifting
\begin_inset Quotes erd
\end_inset

 del 
\family typewriter
precio(price)
\family default
 en una formula que lo multiplica por la 
\family typewriter
cantidad(quantity
\family default
).
 A continuación se ve como funciona en la consola:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

scala> import net.liftweb._
\end_layout

\begin_layout Plain Layout

import net.liftweb._
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> import util._
\end_layout

\begin_layout Plain Layout

import util._
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> val quantity = ValueCell(0)
\end_layout

\begin_layout Plain Layout

quantity: net.liftweb.util.ValueCell[Int] = ValueCell(0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> val price = ValueCell(0d)
\end_layout

\begin_layout Plain Layout

price: net.liftweb.util.ValueCell[Double] = ValueCell(0.0)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> val total = price.lift(_ * quantity)
\end_layout

\begin_layout Plain Layout

total: net.liftweb.util.Cell[Double] = FuncCell1(ValueCell(0.0),<function1>)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> total.get
\end_layout

\begin_layout Plain Layout

res1: Double = 0.0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> quantity.set(10)
\end_layout

\begin_layout Plain Layout

res2: Int = 10
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> price.set(0.5d)
\end_layout

\begin_layout Plain Layout

res3: Double = 0.5
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

scala> total.get       
\end_layout

\begin_layout Plain Layout

res4: Double = 5.0
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Okay...
 muy elegante...
 se pueden definir ralaciones que son arbitrariamente complejas entre las
 
\family typewriter
Celdas(Cell
\family default
s) y estas ya saben como calcularse.
\end_layout

\begin_layout Section
Contectarlo a la Interfaz de Usuario
\end_layout

\begin_layout Standard
Ahora que se pueden declaran relaciones entre las celdas, ¿Como se asocian
 los valores de las 
\family typewriter
Celdas(Cell
\family default
s) con la interfaz de usuario?
\end_layout

\begin_layout Standard
Resulta que es bastante simple:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 "#total" #> WiringUI.asText(total)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Se asocia un elemento con 
\family typewriter
id="total"
\family default
 con una función que muestra el valor que tiene 
\family typewriter
total
\family default
.
 A continuación se muestra la definición del método:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  /**
\end_layout

\begin_layout Plain Layout

   * Dada una Celda(Cell) registra el
\end_layout

\begin_layout Plain Layout

   * postPageJavaScript que actualizará el elemento con
\end_layout

\begin_layout Plain Layout

   * un nuevo valor.
\end_layout

\begin_layout Plain Layout

   *
\end_layout

\begin_layout Plain Layout

   * @param cell la celda con la cual asociar el elemento
\end_layout

\begin_layout Plain Layout

   * 
\end_layout

\begin_layout Plain Layout

   * @return una función que mutara el NodeSeq ( un atributo id puede ser
 añadido si 
\end_layout

\begin_layout Plain Layout

   * no existe todavía ninguno)
\end_layout

\begin_layout Plain Layout

   */
\end_layout

\begin_layout Plain Layout

  def asText[T](cell: Cell[T]): NodeSeq => NodeSeq = 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Eh? esto es bastante confuso...
 ¿Qué es un 
\family typewriter
postPageJavaScript
\family default
?
\end_layout

\begin_layout Standard
Por lo tanto, aquí esta la magia de 
\family typewriter
WiringUI
\family default
: La mayoría de los frameworks web tratan el renderizado de una página como
 un evento en el tiempo.
 Quizas(en el caso de Seaside),  existen alguns efectos colaterales al renderiza
r tan cerca al estado de la página tal es que cuando los formularios son
 enviados de vuelta, obtienes nuevamente el estado de la página.
 Lift trata el renderizado completo de una página y las solicitudes Ajax
 posteriores de una página como un solo evento que tiene un solo ámbito.
 Esto quiere decir que
\family typewriter
 RequestVar
\family default
s pobladas durante el renderizado de una página estan disponibles durante
 solicitudes Ajax posteriores en esa página.
 Parte del estado que se traduce en un renderizado de una página es el 
\family typewriter
postPageJavaScript
\family default
 que es un cubo de 
\family typewriter
() => JsCmd
\family default
 o una colección de funciones que devuelven JavaScript.
 Antes de responder cualquier solicitud HTTP asociada con la página, Lift
 ejecuta todas estas funciones y añade el JavaScript resultante a la respuesta
 que es enviada de vuelta al navegador.
 Las solicitues HTTP asociadas a la página incluyen el renderizado inicial
 de la página, solcitudes posteriores asociadas a la página, y solicitudes
 Comet(long poll) generadas por la página.
\end_layout

\begin_layout Standard
Para cada 
\family typewriter
Celda(Cell)
\family default
 que se ha integrado con la interfaz de usuario, Lift captura el id del
 nodo del DOM (y si no existe un id, Lift le asigna uno) y el valor actual
 de la 
\family typewriter
Celda(Cell
\family default
).
 Lift genera una función que mira el valor actual de la 
\family typewriter
Celda(Cell)
\family default
 y si este cambio, Lift genera una JavaScript que actualiza el nodo del
 DOM con el valor actual de la 
\family typewriter
Celda(Cell
\family default
).
\end_layout

\begin_layout Standard
El resultado es que si una operación Ajax cambia el valor de una Celda de
 tipo 
\family typewriter
ValueCell
\family default
, entonces todas las celdas dependientes serán actualizadas, y las actualizacion
es asociadas con el DOM serán llevadas de vuelta con la respuesta HTPP.
\end_layout

\begin_layout Standard
Se tiene mucho control sobre como mostrar el valor.
 El método 
\family typewriter
asText
\family default
 crea un 
\family typewriter
Text(cell.toString)
\family default
.
 Sin embargo, 
\family typewriter
WiringUI.apply
\family default
 permite asociar una función que convierte el tipo 
\family typewriter
T
\family default
 de la 
\family typewriter
Celda(Cell
\family default
) a un 
\family typewriter
NodeSeq
\family default
.
 Adicionalmente se puede controlar la transición en el navegador con un
 
\family typewriter
jsEffect
\family default
 (firma de tipo 
\family typewriter
(String, Boolean, JsCmd) => JsCmd
\family default
).
 Existen 
\family typewriter
jsEffects
\family default
 pre construidos, basados en jQuery , incluyendo mi favorito, 
\family typewriter
fade
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  /**
\end_layout

\begin_layout Plain Layout

   * Desaparece el valor antiguo y hace aparecer el nuevo valor
\end_layout

\begin_layout Plain Layout

   * usando jQuery fast fade.
\end_layout

\begin_layout Plain Layout

   */
\end_layout

\begin_layout Plain Layout

  def fade: (String, Boolean, JsCmd) => JsCmd = {
\end_layout

\begin_layout Plain Layout

    (id: String, first: Boolean, cmd: JsCmd) => {
\end_layout

\begin_layout Plain Layout

      if (first) cmd
\end_layout

\begin_layout Plain Layout

      else {
\end_layout

\begin_layout Plain Layout

        val sel = "jQuery('#'+"+id.encJs+")"
\end_layout

\begin_layout Plain Layout

        Run(sel+".fadeOut('fast', function() {"+
\end_layout

\begin_layout Plain Layout

            cmd.toJsCmd+" "+sel+".fadeIn('fast');})")
\end_layout

\begin_layout Plain Layout

      }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Que se puede usar así: 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

 "#total" #> WiringUI.asText(total, JqWiringSupport.fade)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ahora, cuando el campo total se actualize, el valor antiguo desaparecerá
 y el valor nuevo aparecerá...
 cool.
\end_layout

\begin_layout Section
Compra compartida
\end_layout

\begin_layout Standard
Let's move onto a real code example.
 You can find this code at 
\begin_inset CommandInset href
LatexCommand href
name "Shop with Me source"
target "https://github.com/dpp/simply_lift/tree/master/samples/shopwithme"

\end_inset

.
\end_layout

\begin_layout Standard
The example is going to be a simple shopping site.
 There are a bunch of items that you can view.
 You have a shopping cart.
 You can add items to the cart.
 If you're viewing the cart in multiple tabs or browser windows, the cart
 in all tabs/windows will update when you change the cart.
 Further, you can share your cart with someone else and any changes to the
 cart will be propagated to all the different browsers sharing the same
 cart.
\end_layout

\begin_layout Standard
The data model is the same that we used in the REST chapter (see
\begin_inset CommandInset ref
LatexCommand vref
reference "item_model"

\end_inset

).
\end_layout

\begin_layout Standard
Let's look at the shopping cart definition:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "src/main/scala/code/lib/Cart.scala"
lstparams "caption={Cart.scala}"

\end_inset


\end_layout

\begin_layout Standard
Looks pretty straight forward.
 You've got 2 
\family typewriter
ValueCell
\family default
s, the cart contents and the tax rate.
 You've gota bunch of calculated 
\family typewriter
Cell
\family default
s.
 At the bottom of the 
\family typewriter
Cart
\family default
 class definition are some helper methods that allow you to add, remove
 and update cart contents.
 We also define the 
\family typewriter
CartItem
\family default
 case class that contains the 
\family typewriter
Item
\family default
 and the 
\family typewriter
qnty
\family default
 (quantity).
\end_layout

\begin_layout Standard
So far, so good.
 Next, let's look at the way we display all the items:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "src/main/scala/code/snippet/AllItemsPage.scala"
lstparams "caption={AllItemsPage.scala}"

\end_inset


\end_layout

\begin_layout Standard
We define our 
\family typewriter
SiteMap
\family default
 entry:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  lazy val menu = Menu.i("Items") / "item" >>
\end_layout

\begin_layout Plain Layout

    Loc.Snippet("Items", render)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
So, when the user browses to 
\family typewriter
/item
\family default
, they're presented with all the items in inventory.
 
\end_layout

\begin_layout Standard
The template for displaying 
\family typewriter
Item
\family default
s looks like:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "src/main/webapp/_items.html"
lstparams "caption={items.html},language=xml"

\end_inset


\end_layout

\begin_layout Standard
Next, let's look at the code for displaying an 
\family typewriter
Item
\family default
:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "src/main/scala/code/snippet/AnItemPage.scala"
lstparams "caption={AnItemPage.scala}"

\end_inset


\end_layout

\begin_layout Standard
This defines what happens when the user goes to 
\family typewriter
/item/1234
\family default
.
 This is more 
\begin_inset Quotes eld
\end_inset

controller-like
\begin_inset Quotes erd
\end_inset

 than most of the other Lift code.
 Let's look at the menu item definition:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

  def menu = Menu.param[Item]("Item", Loc.LinkText(i => Text(i.name)),
\end_layout

\begin_layout Plain Layout

                              Item.find _, _.id) / "item" / *
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We are defining a parameterized 
\family typewriter
Menu
\family default
 entry.
 The parameter type is 
\family typewriter
Item
\family default
.
 That means that the page will display an 
\family typewriter
Item
\family default
 and that we must be able to calculate the 
\family typewriter
Item
\family default
 based on the request.
\end_layout

\begin_layout Standard

\family typewriter
"Item"
\family default
 is the name of the menu entry.
 
\end_layout

\begin_layout Standard

\family typewriter
Loc.LinkText(i => Text(i.name))
\family default
 takes an item and generates the display text for the menu entry.
\end_layout

\begin_layout Standard

\family typewriter
Item.find _
\family default
 is a function that takes a 
\family typewriter
String
\family default
 and converts it to 
\family typewriter
Box[Item]
\family default
.
 It looks up the Item based on the parameter in the request that we're intereste
d in.
\end_layout

\begin_layout Standard

\family typewriter
_.id
\family default
 is a function (
\family typewriter
Item => String
\family default
) that takes an 
\family typewriter
Item
\family default
 and returns a 
\family typewriter
String
\family default
 that represents how to build a URL that represents the Item page.
 This is used by 
\family typewriter
"a [href]" #> AnItemPage.menu.calcHref(item)
\family default
 to convert an 
\family typewriter
Item
\family default
 to the HREF for the page that display the 
\family typewriter
Item
\family default
.
\end_layout

\begin_layout Standard
Finally, the URL is defined by 
\family typewriter
/ "item" / *
\family default
 which is pretty much what it looks like.
 It'll match an incoming request of the form 
\family typewriter
/item/xxx
\family default
 and 
\family typewriter
xxx
\family default
 is passed to the 
\family typewriter
String => Box[Item]
\family default
 function to determine the 
\family typewriter
Item
\family default
 associated with the URL.
\end_layout

\begin_layout Standard
So, we can display all the items.
 Navigate from all the items to a single item.
 Each item has a button that allows you to add the 
\family typewriter
Item
\family default
 to the shopping cart.
 The 
\family typewriter
Item
\family default
 is added to the cart with this code: 
\family typewriter
SHtml.ajaxInvoke(() => TheCart.addItem(item))})
\family default
.
 The 
\family typewriter
TheCart.addItem(item)
\family default
 can be called from anywhere in the application without regard for what
 needs to be updated when the cart is changed.
\end_layout

\begin_layout Standard
Let's look at how the cart is displayed and managed:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "src/main/scala/code/comet/CometCart.scala"
lstparams "caption={CometCart.scala}"

\end_inset


\end_layout

\begin_layout Standard
Let's walk through the code:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

object TheCart extends SessionVar(new Cart())
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We define a 
\family typewriter
SessionVar
\family default
 that holds the shopping cart.
\end_layout

\begin_layout Standard
Our 
\family typewriter
CometActor
\family default
 captures the the current cart from the 
\family typewriter
SessionVar
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class CometCart extends CometActor {
\end_layout

\begin_layout Plain Layout

  // our current cart
\end_layout

\begin_layout Plain Layout

  private var cart = TheCart.get
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Next, let's see how to draw the 
\family typewriter
cart.total
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

"#total" #> WiringUI.asText(cart.total) // display the total
\end_layout

\end_inset


\end_layout

\begin_layout Standard
That's pretty much the way it should be.
\end_layout

\begin_layout Standard
Let's look at the gnarly piece...
 how to draw or redraw the cart contents based on changes and only send
 the JavaScript the will manipulate the browser DOM to add or remove items
 from the cart:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

"#contents" #> (
\end_layout

\begin_layout Plain Layout

      "tbody" #> 
\end_layout

\begin_layout Plain Layout

      Helpers.findOrCreateId(id =>  // make sure tbody has an id
\end_layout

\begin_layout Plain Layout

        // when the cart contents updates
\end_layout

\begin_layout Plain Layout

        WiringUI.history(cart.contents) {
\end_layout

\begin_layout Plain Layout

          (old, nw, ns) => {
\end_layout

\begin_layout Plain Layout

            // capture the tr part of the template
\end_layout

\begin_layout Plain Layout

            val theTR = ("tr ^^" #> "**")(ns)
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

            def ciToId(ci: CartItem): String = ci.id + "_" + ci.qnty
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            // build a row out of a cart item
\end_layout

\begin_layout Plain Layout

            def html(ci: CartItem): NodeSeq = {
\end_layout

\begin_layout Plain Layout

              ("tr [id]" #> ciToId(ci) & 
\end_layout

\begin_layout Plain Layout

               "@name *" #> ci.name &
\end_layout

\begin_layout Plain Layout

               "@qnty *" #> SHtml.
\end_layout

\begin_layout Plain Layout

               ajaxText(ci.qnty.toString,
\end_layout

\begin_layout Plain Layout

                        s => {
\end_layout

\begin_layout Plain Layout

                          TheCart.
\end_layout

\begin_layout Plain Layout

                          setItemCnt(ci, 
\end_layout

\begin_layout Plain Layout

                                     Helpers.toInt(s))
\end_layout

\begin_layout Plain Layout

                        }, "style" -> "width: 20px;") &
\end_layout

\begin_layout Plain Layout

               "@del [onclick]" #> SHtml.
\end_layout

\begin_layout Plain Layout

             ajaxInvoke(() => TheCart.removeItem(ci)))(theTR)
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

            // calculate the delta between the lists and
\end_layout

\begin_layout Plain Layout

            // based on the deltas, emit the current jQuery
\end_layout

\begin_layout Plain Layout

            // stuff to update the display
\end_layout

\begin_layout Plain Layout

            JqWiringSupport.calculateDeltas(old, nw, id)(ciToId _, html _)
\end_layout

\begin_layout Plain Layout

          }
\end_layout

\begin_layout Plain Layout

        }))
\end_layout

\end_inset


\end_layout

\begin_layout Standard
First, we make sure we know the 
\family typewriter
id
\family default
 of the 
\family typewriter
<tbody>
\family default
 element: 
\family typewriter
"tbody" #> Helpers.findOrCreateId(id =>
\end_layout

\begin_layout Standard
Next, wire the 
\family typewriter
CometCart
\family default
 up to the 
\family typewriter
cart.contents
\family default
 such that when the contents change, we get the old value (
\family typewriter
old
\family default
), the new value (
\family typewriter
nw
\family default
) and the memoized 
\family typewriter
NodeSeq
\family default
 (the template used to do the rendering): 
\family typewriter
WiringUI.history(cart.contents) { (old, nw, ns) => {
\end_layout

\begin_layout Standard
Capture the part of the template associated with the 
\family typewriter
<tr>
\family default
 element in the 
\family typewriter
theTR
\family default
 variable: 
\family typewriter
val theTR = ("tr ^^" #> "**")(ns)
\end_layout

\begin_layout Standard
Based on a 
\family typewriter
CartItem
\family default
, return a stable id for the DOM node the represents the 
\family typewriter
CartItem
\family default
: 
\end_layout

\begin_layout Standard
The 
\family typewriter
html
\family default
 method converts a 
\family typewriter
CartItem
\family default
 to a 
\family typewriter
NodeSeq
\family default
 including Ajax controls for changing quantity and removing the item from
 the cart.
\end_layout

\begin_layout Standard
Finally, based on the deltas between the old list of 
\family typewriter
CartItem
\family default
 and the new list, generate the JavaScript that will manipulate the DOM
 by inserting and removing the appropriate DOM elements: 
\family typewriter
JqWiringSupport.calculateDeltas(old, nw, id)(ciToId _, html _)
\end_layout

\begin_layout Standard
Next, let's see how to change the cart.
 If we want to share the shopping cart between two browser sessions...
 two people shopping at their browser, but putting things in a single cart,
 we need a way to change the cart.
 We process the 
\family typewriter
SetNewCart
\family default
 message to 
\family typewriter
CometCart
\family default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

    // if someone sends us a new cart
\end_layout

\begin_layout Plain Layout

    case SetNewCart(newCart) => {
\end_layout

\begin_layout Plain Layout

      // unregister from the old cart
\end_layout

\begin_layout Plain Layout

      unregisterFromAllDepenencies()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      // remove all the dependencies for the old cart
\end_layout

\begin_layout Plain Layout

      // from the postPageJavaScript
\end_layout

\begin_layout Plain Layout

      theSession.clearPostPageJavaScriptForThisPage()
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      // set the new cart
\end_layout

\begin_layout Plain Layout

      cart = newCart
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

      // do a full reRender including the fixed render piece
\end_layout

\begin_layout Plain Layout

      reRender(true)
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\begin_layout Standard
There are two lines in the above code that hint at how Wiring interacts
 with Lift's Comet support: 
\family typewriter
unregisterFromAllDepenencies()
\family default
 and 
\family typewriter
theSession.clearPostPageJavaScriptForThisPage()
\end_layout

\begin_layout Standard
When a 
\family typewriter
CometActor
\family default
 depends on something in 
\family typewriter
WiringUI
\family default
, Lift generates a weak reference between the 
\family typewriter
Cell
\family default
 and the 
\family typewriter
CometActor
\family default
.
 When the 
\family typewriter
Cell
\family default
 changes value, it pokes the 
\family typewriter
CometActor
\family default
.
 The 
\family typewriter
CometActor
\family default
 then updates the browser's screen real estate associated with changes to
 
\family typewriter
Cell
\family default
s.
 
\family typewriter
unregisterFromAllDepenencies()
\family default
 disconnects the 
\family typewriter
CometActor
\family default
 from the 
\family typewriter
Cell
\family default
s.
 
\family typewriter
theSession.clearPostPageJavaScriptForThisPage()
\family default
 removes all the 
\family typewriter
postPageJavaScript
\family default
 associated with the 
\family typewriter
CometActor
\family default
.
 Because the 
\family typewriter
CometActor
\family default
 is not associated with a single page, but can appear on many pages, it
 has its own 
\family typewriter
postPageJavaScript
\family default
 context.
\end_layout

\begin_layout Standard
The final piece of the puzzle is how we share a 
\family typewriter
Cart
\family default
 across sessions.
 From the UI perspective, here's how we display the modal dialog when the
 user presses the 
\begin_inset Quotes eld
\end_inset

Share Cart
\begin_inset Quotes erd
\end_inset

 button:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "src/main/scala/code/snippet/Link.scala"
lstparams "caption={Link.scala}"

\end_inset


\end_layout

\begin_layout Standard
Basically, we use jQuery's ModalDialog plugin to put a dialog up that contains
 a link generated by the 
\family typewriter
ShareCart
\family default
 object.
 Let's look at ShareCart.scala:
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "src/main/scala/code/lib/ShareCart.scala"
lstparams "caption={ShareCart.scala}"

\end_inset


\end_layout

\begin_layout Standard
The code manages the association between random IDs and 
\family typewriter
Cart
\family default
s.
 If the user browses to 
\family typewriter
/co_shop/share_cart_id
\family default
, 
\family typewriter
ShareCart
\family default
 will set 
\family typewriter
TheCart
\family default
 to the shared 
\family typewriter
Cart
\family default
 and send a 
\family typewriter
SetNewCart
\family default
 message to the 
\family typewriter
CometCart
\family default
 instance associated with the session.
\end_layout

\begin_layout Section
Wrap up
\end_layout

\begin_layout Standard
In this chapter we've seen how Lift's Wiring can be used to create complex
 inter-relationships among values and then surface those relationships in
 the web user interface.
 Wiring can be used with Ajax or Comet.
 Wiring makes it simple to build complex web pages that are user friendly
 and easy to maintain.
\end_layout

\end_body
\end_document
