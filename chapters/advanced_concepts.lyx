#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Chapter
Advanced Concepts
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Snippet-Resolution"

\end_inset

Snippet Resolution
\end_layout

\begin_layout Standard
Lift snippets transform markup to dynamic content.
 The are functions that transform 
\family typewriter
NodeSeq => NodeSeq
\family default
.
\end_layout

\begin_layout Standard
Snippets can be invoked from templates via tags:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=xml"
inline false
status open

\begin_layout Plain Layout

<lift:surround with="default" at="content">
\end_layout

\begin_layout Plain Layout

  <p>
\end_layout

\begin_layout Plain Layout

    You have reached this page, but you can only get here if you've logged
 in
\end_layout

\begin_layout Plain Layout

    first.
\end_layout

\begin_layout Plain Layout

  </p>
\end_layout

\begin_layout Plain Layout

</lift:surround>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
or via class attributes.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=xml"
inline false
status open

\begin_layout Plain Layout

<p class="lift:surround?with=default;at=content">
\end_layout

\begin_layout Plain Layout

  You have reached this page, but you can only get here if you've logged
 in
\end_layout

\begin_layout Plain Layout

  first.
\end_layout

\begin_layout Plain Layout

</p>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In both cases, the surround (See 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sec:Surround"

\end_inset

) snippet will be invoked with attribute 
\family typewriter
with
\family default
 set to 
\family typewriter
default
\family default
 and 
\family typewriter
at
\family default
 set to 
\family typewriter
content
\family default
.
 The parameter passed to the surround 
\family typewriter
NodeSeq => NodeSeq
\family default
 function is:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=xml"
inline false
status open

\begin_layout Plain Layout

<p>
\end_layout

\begin_layout Plain Layout

  You have reached this page, but you can only get here if you've logged
 in
\end_layout

\begin_layout Plain Layout

  first.
\end_layout

\begin_layout Plain Layout

</p>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lift will resolve from the snippet name to a function in the following steps.
\end_layout

\begin_layout Subsection

\family typewriter
LiftSession.liftTagProcessing
\end_layout

\begin_layout Standard
Lift consults a 
\family typewriter
List[PartialFunction[(String, Elem, MetaData, NodeSeq, String), NodeSeq]]
\family default
 located in LiftSession.liftTagProcessing for the rules to use to evaluate
 the snippet name, attributes, etc.
 into the resulting 
\family typewriter
NodeSeq
\family default
.
 
\family typewriter
LiftSession.liftTagProcessing
\family default
 is the result of 
\family typewriter
LiftRules.liftTagProcessing
\family default
 or else the default Lift tag processor.
 If you need special snippet resolution mechanisms, you can place them in
 
\family typewriter
LiftRules.liftTagProcessing
\family default
.
 By default, the snippets get processed by 
\family typewriter
LiftSession.processSnippet.
\end_layout

\begin_layout Subsection

\family typewriter
LiftRules.liftTagProcessing
\end_layout

\begin_layout Standard

\family typewriter
LiftRules.liftTagProcessing
\family default
 looks for the 
\family typewriter
form
\family default
 attribute and sets the 
\family typewriter
isForm
\family default
 variable.
 Next, Lift determines if the contents of the snippet should be evaluated
 eagerly by looking for one of 
\family typewriter
eager_eval
\family default
, 
\family typewriter
l:eager_eval
\family default
, or 
\family typewriter
lift:eager_eval
\family default
 attributes.
\end_layout

\begin_layout Standard
If the snippet is an eager evaluation, the child tags will be evaluated
 for any snippets.
\end_layout

\begin_layout Standard
Either the originally passed children or the eagerly evaluated children
 will be referred to as children in the next section.
\end_layout

\begin_layout Subsection
Snippet name resolution
\end_layout

\begin_layout Standard
Lift looks for the named snippet in the following locations in order:
\end_layout

\begin_layout Itemize

\family typewriter
S.locateMappedSnippet
\family default
 - the complete snippet name without any camel or snake application is used
 to look up a 
\family typewriter
NodeSeq => NodeSeq
\family default
 in within the scope of the current extended request
\begin_inset Foot
status open

\begin_layout Plain Layout
For the purposes of this discussion, the extended request is the scope of
 a 
\family typewriter
RequestVar
\family default
.
 This is the scope of a full page render plus any subsequent Ajax operations
 that originate from that page.
 This means that a snippet may be registered using 
\family typewriter
S.mapSnippet
\family default
 during page rendering and the same snippet function with the same scope
 binding will be used by any Ajax commands.
\end_layout

\end_inset

.
 Snippets may be registered using 
\family typewriter
S.mapSnippet
\family default
.
 
\end_layout

\begin_layout Itemize

\family typewriter
SiteMap
\family default
 
\family typewriter
Loc
\family default
 snippet - the current 
\family typewriter
SiteMap
\family default
 
\family typewriter
Loc
\family default
 (
\family typewriter
S.location
\family default
) will be queried to see if it has a 
\family typewriter
NodeSeq => NodeSeq
\family default
 that matches the current snippet name (
\family typewriter
loc.snippet(snippetName)
\family default
).
\end_layout

\begin_layout Itemize

\family typewriter
LiftRules.snippets
\family default
 - next, the snippet name is split at the '.' character to determine the
 snippet name and snippet method name.
 The 
\family typewriter
snippets
\family default
 
\family typewriter
RulesSeq
\family default
 is tested for a match between the 
\family typewriter
List[String]
\family default
 that results from splitting the name at the period and 
\family typewriter
NodeSeq => NodeSeq
\family default
.
\end_layout

\begin_layout Itemize
If the above mechanisms do not result in a NodeSeq => NodeSeq, Lift looks
 for a 
\family typewriter
Class
\family default
 that matches the name.
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
S.snippetForClass
\family default
 - is checked to see if a 
\family typewriter
Class
\family default
 has been associated with the snippet name.
 If none is found...
\end_layout

\begin_layout Itemize

\family typewriter
LiftRules.snippetDispatch
\family default
 is checked to see if theres an instance of 
\family typewriter
DispatchSnippet
\family default
 that matches to snippet name.
 Lift's built-in snippets are registered with 
\family typewriter
LiftRules.snippetDispatch
\family default
.
 If there's no match...
\end_layout

\begin_layout Itemize
Lift tries reflection to find a matching class name (note that Lift will
 try camel case and snake case for class names, so the 
\family typewriter
foo_bar
\family default
 snippet will match the class 
\family typewriter
foo_bar
\family default
 as well as 
\family typewriter
FooBar
\family default
).
 Lift looks for classes in the 
\family typewriter
snippet
\family default
 subpackage of all the packages added via 
\family typewriter
LiftRules.addToPackages
\family default
.
 So if you call 
\family typewriter
LiftRules.addToPackages("foo.bar")
\family default
 in 
\family typewriter
Boot.scala
\family default
, then Lift will search for the classes 
\family typewriter
foo.bar.snippet.foo_bar
\family default
 and 
\family typewriter
foo.bar.snippet.FooBar
\family default
.
\end_layout

\begin_layout Itemize
Once the class is found, Lift will try to instantiate the class the following
 ways:
\end_layout

\begin_deeper
\begin_layout Itemize
Lift will look at the current location (
\family typewriter
S.location
\family default
) and if the parameter type of the 
\family typewriter
Loc
\family default
 is not 
\family typewriter
Unit
\family default
, Lift get the current parameter and look for a constructor that matches
 the current parameter type or 
\family typewriter
Box
\family default
 of current parameter type (and superclasses of both).
 If there's a match the constructor will be called with the parameters.
 For example, if the current page is a 
\family typewriter
Loc[Dog]
\family default
 and 
\family typewriter
Dog
\family default
 is a subclass of 
\family typewriter
Animal
\family default
, the following constructors will match:
\end_layout

\begin_deeper
\begin_layout Itemize

\family typewriter
class MySnippet(dog: Dog)
\end_layout

\begin_layout Itemize

\family typewriter
class MySnippet(animal: Animal)
\end_layout

\begin_layout Itemize

\family typewriter
class MySnippet(dog: Box[Dog])
\end_layout

\begin_layout Itemize

\family typewriter
class MySnippet(animal: Box[Animal])
\end_layout

\begin_layout Itemize

\family typewriter
class MySnippet(dog: Dog, session: LiftSession)
\end_layout

\begin_layout Itemize

\family typewriter
class MySnippet(animal: Animal, session: LiftSession)
\end_layout

\begin_layout Itemize

\family typewriter
class MySnippet(dog: Box[Dog], session: LiftSession)
\end_layout

\begin_layout Itemize

\family typewriter
class MySnippet(animal: Box[Animal], session: LiftSession)
\end_layout

\end_deeper
\begin_layout Itemize
If a typed constructor cannot be found, try the zero argument constructor;
\end_layout

\begin_layout Itemize
If the zero argument constructor cannot be found, try to treat the 
\family typewriter
Class
\family default
 as a Scala 
\family typewriter
object
\family default
 singleton and get the instance that the singleton refers to.
\end_layout

\end_deeper
\begin_layout Itemize
Once we've got an instance of the potential snippet handling class:
\end_layout

\begin_deeper
\begin_layout Itemize
If it's a 
\family typewriter
StatefulSnippet
\family default
, register with 
\family typewriter
S.overrideSnippetForClass
\family default
;
\end_layout

\begin_layout Itemize
Update the 
\family typewriter
LiftSession
\family default
 
\family typewriter
snippetMap
\family default
 
\family typewriter
RequestVar
\family default
 so subsequent references to the snippet during the same extended request
 uses same instance (that way if any instance variables are set on the class
 instance, they are picked up by subsequent accesses to the same snippet);
\end_layout

\begin_layout Itemize
Next, Lift attempts to invoke the snippet method.
 If no explicit method is given, the 
\family typewriter
render
\family default
 method is used.
\end_layout

\begin_deeper
\begin_layout Itemize
Stateful and Dispatch use 
\family typewriter
dispatch
\family default
 method to find the 
\family typewriter
NodeSeq => NodeSeq
\end_layout

\begin_layout Itemize
Non-dispatch, do the following method lookup:
\end_layout

\begin_layout Itemize
method that takes no parameters and returns 
\family typewriter
CssBindFunc
\family default
, 
\family typewriter
NodeSeq => NodeSeq
\family default
, invoke the method and apply the function to the children; or
\end_layout

\begin_layout Itemize
try to invoke the named method with 
\family typewriter
Group(children)
\family default
 (
\family typewriter
NodeSeq
\family default
 signature) or invoke it with no parameters.
 If the return value is 
\family typewriter
NodeSeq
\family default
, 
\family typewriter
Node
\family default
, or 
\family typewriter
Seq[Node]
\family default
, then it was successful.
\end_layout

\end_deeper
\end_deeper
\end_deeper
\begin_layout Subsection
Post-processing of results
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Itemize
LiftRules.snippetDispatch (built in snippets registered here)
\end_layout

\begin_layout Standard
parallel snippets
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:The-Merging-Phase"

\end_inset

The Merging Phase
\end_layout

\end_body
\end_document
