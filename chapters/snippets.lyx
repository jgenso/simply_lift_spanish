#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass book
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Snippets
\begin_inset CommandInset label
LatexCommand label
name "sec:Snippets"

\end_inset


\end_layout

\begin_layout Standard
Lift is built on the Scala programming language.
 Scala is a hybrid of Functional and Object Oriented.
 Two core principles of functional programming languages are immutability
 and transformation.
\end_layout

\begin_layout Standard
Immutability means that once a data structure is instantiated, it will not
 change for its life.
 More concretely, once you instantiate an object, you can freely pass the
 object around and the object will always return the same values for all
 its methods.
 Java's 
\family typewriter
String
\family default
 class is immutable.
 Python requires immutable classes as indexes to dictionaries.
 Immutability is also very powerful for multithreaded applications because
 you can pass references to immutable objects across thread boundaries without
 having to worry about locking or synchronization because you are guaranteed
 that the objects will not change state.
\end_layout

\begin_layout Subsection
Snippet 
\family typewriter
NodeSeq => NodeSeq
\end_layout

\begin_layout Standard
Transformation provides an alternative to 
\begin_inset Quotes eld
\end_inset

writing to a stream
\begin_inset Quotes erd
\end_inset

 for composing web pages.
 Rather than having tags that cause characters to be streamed as part of
 the response, Lift loads the view and for each 
\begin_inset Quotes eld
\end_inset

snippet
\begin_inset Quotes erd
\end_inset

 encountered in the view, Lift transforms just the markup associated with
 the snippet invocation into a new set of HTML.
\end_layout

\begin_layout Standard
Let's make it more concrete, here's some markup:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=xml"
inline false
status open

\begin_layout Plain Layout

<span class="foo lift:WhatTime">The time is <span id="current_time">currentTime<
/span></span>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
And the associated snippet:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

object WhatTime {
\end_layout

\begin_layout Plain Layout

  def render = "#current_time" #> (new Date).toString
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The resulting markup will look like:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=xml"
inline false
status open

\begin_layout Plain Layout

<span class="foo">The time is Mon Dec 06 21:01:36 PST 2010</span>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's walk through how this works.
 First, the class attribute in the 
\family typewriter
<span>
\family default
 has two classes, 
\family typewriter
foo
\family default
 and 
\family typewriter
lift:WhatTime
\family default
.
 Any class attribute that starts with 
\family typewriter
lift:
\family default
 indicates a snippet invocation.
 A snippet is a function that transforms HTML to HTML, or in Scala, 
\family typewriter
NodeSeq => NodeSeq
\family default
.
\end_layout

\begin_layout Standard
Lift looks up the snippet named 
\family typewriter
WhatTime
\family default
 (See 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sec:Snippet-Resolution"

\end_inset

) which in this case resolves to a singleton and invokes the 
\family typewriter
render
\family default
 method.
 The render method returns a 
\family typewriter
NodeSeq => NodeSeq
\family default
 built using Lift's CSS Selector Transforms (See 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sec:CSS-Selector-Transforms"

\end_inset

).
 The parameter to the function is the 
\family typewriter
Element
\family default
 that caused the snippet invocation with the actual snippet invocation removed
 from the 
\family typewriter
class
\family default
 attribute: 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=xml"
inline false
status open

\begin_layout Plain Layout

<span class="foo">The time is <span id="current_time">currentTime</span></span>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The function is then applied and the resulting 
\family typewriter
NodeSeq
\family default
 is inserted in the page where the original 
\family typewriter
Element
\family default
 was.
 Because the page is composed of immutable XML objects, we can transform
 
\family typewriter
NodeSeq => NodeSeq
\family default
 and not worry about anything getting changed out from under us.
 We also know that we've got valid markup through the entire page transformation
 process.
\end_layout

\begin_layout Standard
Further, retaining the page as a well formed XML document allows certain
 tags to be put in the 
\family typewriter
<head>
\family default
 tag and other tags to be inserted just before the close of the 
\family typewriter
</body>
\family default
 tag (See 
\begin_inset CommandInset ref
LatexCommand prettyref
reference "sec:Page-rewriting"

\end_inset

).
\end_layout

\begin_layout Standard
But the simplicity of the transform is simulateously easy to understand
 and very powerful.
\end_layout

\begin_layout Subsection
Snippet instances
\end_layout

\begin_layout Standard
The snippet could also be defined as:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class WhatTime {
\end_layout

\begin_layout Plain Layout

  private var x = 0
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  def render = {
\end_layout

\begin_layout Plain Layout

    x += 1
\end_layout

\begin_layout Plain Layout

    "#current_time" #> ((new Date).toString + " and you've seen this message
 "+x+" times)
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Multiple methods on a snippet class
\end_layout

\begin_layout Subsection
Inter-snippet communication
\end_layout

\begin_layout Subsection
Recursive Snippets
\end_layout

\begin_layout Subsection
Snippet parameters
\end_layout

\end_body
\end_document
